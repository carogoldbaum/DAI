{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ActionTypes, useContextState } from \"../ContextState\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ModalCasero = function ModalCasero(_ref) {\n  var texto = _ref.texto;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  var _useContextState = useContextState(),\n    contextState = _useContextState.contextState,\n    setContextState = _useContextState.setContextState;\n  return _jsxs(View, {\n    style: styles.centeredView,\n    children: [_jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(Text, {\n            style: styles.modalText,\n            children: texto\n          }), _jsx(Pressable, {\n            style: [styles.button, styles.buttonClose],\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"cerrar\"\n            })\n          })]\n        })\n      })\n    }), _jsx(Pressable, {\n      style: [styles.button, styles.buttonOpen],\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      children: _jsx(Text, {\n        style: styles.textStyle,\n        children: \"Mostrar informacion escaneada\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: -6\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\"\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 17,\n    textAlign: \"center\"\n  }\n});\nexport default ModalCasero;","map":{"version":3,"names":["React","useState","ActionTypes","useContextState","ModalCasero","texto","modalVisible","setModalVisible","contextState","setContextState","styles","centeredView","Alert","alert","modalView","modalText","button","buttonClose","textStyle","buttonOpen","StyleSheet","create","flex","justifyContent","alignItems","marginTop","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","color","fontWeight","textAlign","marginBottom"],"sources":["C:/Users/CasadelIP/Desktop/DAI/TP-DAI-RN-2/Components/ModalCasero.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Alert, Modal, StyleSheet, Text, Pressable, View } from \"react-native\";\r\nimport { ActionTypes, useContextState } from '../ContextState'\r\n\r\nconst ModalCasero = ({texto}) => {\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const { contextState, setContextState } = useContextState();\r\n\r\n  return (\r\n    <View style={styles.centeredView}>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          Alert.alert(\"Modal has been closed.\");\r\n          setModalVisible(!modalVisible);\r\n        }}\r\n      >\r\n        \r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <Text style={styles.modalText}>{texto}</Text>\r\n            <Pressable\r\n              style={[styles.button, styles.buttonClose]}\r\n              onPress={() => setModalVisible(!modalVisible)}\r\n            >\r\n              <Text style={styles.textStyle}>cerrar</Text>\r\n            </Pressable>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n      <Pressable\r\n        style={[styles.button, styles.buttonOpen]}\r\n        onPress={() => setModalVisible(true)}\r\n      >\r\n        <Text style={styles.textStyle}>Mostrar informacion escaneada</Text>\r\n      </Pressable>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: -6\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 20,\r\n    padding: 35,\r\n    alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 4,\r\n    elevation: 5\r\n  },\r\n  button: {\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    elevation: 2\r\n  },\r\n  buttonOpen: {\r\n    backgroundColor: \"#F194FF\",\r\n  },\r\n  buttonClose: {\r\n    backgroundColor: \"#2196F3\",\r\n  },\r\n  textStyle: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\"\r\n  },\r\n  modalText: {\r\n    marginBottom: 17,\r\n    textAlign: \"center\"\r\n  }\r\n});\r\n\r\nexport default ModalCasero;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAExC,SAASC,WAAW,EAAEC,eAAe;AAAyB;AAAA;AAE9D,IAAMC,WAAW,GAAG,SAAdA,WAAW,OAAgB;EAAA,IAAXC,KAAK,QAALA,KAAK;EAEzB,gBAAwCJ,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAhDK,YAAY;IAAEC,eAAe;EACpC,uBAA0CJ,eAAe,EAAE;IAAnDK,YAAY,oBAAZA,YAAY;IAAEC,eAAe,oBAAfA,eAAe;EAErC,OACE,MAAC,IAAI;IAAC,KAAK,EAAEC,MAAM,CAACC,YAAa;IAAA,WAC/B,KAAC,KAAK;MACJ,aAAa,EAAC,OAAO;MACrB,WAAW,EAAE,IAAK;MAClB,OAAO,EAAEL,YAAa;MACtB,cAAc,EAAE,0BAAM;QACpBM,KAAK,CAACC,KAAK,CAAC,wBAAwB,CAAC;QACrCN,eAAe,CAAC,CAACD,YAAY,CAAC;MAChC,CAAE;MAAA,UAGF,KAAC,IAAI;QAAC,KAAK,EAAEI,MAAM,CAACC,YAAa;QAAA,UAC/B,MAAC,IAAI;UAAC,KAAK,EAAED,MAAM,CAACI,SAAU;UAAA,WAC5B,KAAC,IAAI;YAAC,KAAK,EAAEJ,MAAM,CAACK,SAAU;YAAA,UAAEV;UAAK,EAAQ,EAC7C,KAAC,SAAS;YACR,KAAK,EAAE,CAACK,MAAM,CAACM,MAAM,EAAEN,MAAM,CAACO,WAAW,CAAE;YAC3C,OAAO,EAAE;cAAA,OAAMV,eAAe,CAAC,CAACD,YAAY,CAAC;YAAA,CAAC;YAAA,UAE9C,KAAC,IAAI;cAAC,KAAK,EAAEI,MAAM,CAACQ,SAAU;cAAA;YAAA;UAAc,EAClC;QAAA;MACP;IACF,EACD,EACR,KAAC,SAAS;MACR,KAAK,EAAE,CAACR,MAAM,CAACM,MAAM,EAAEN,MAAM,CAACS,UAAU,CAAE;MAC1C,OAAO,EAAE;QAAA,OAAMZ,eAAe,CAAC,IAAI,CAAC;MAAA,CAAC;MAAA,UAErC,KAAC,IAAI;QAAC,KAAK,EAAEG,MAAM,CAACQ,SAAU;QAAA;MAAA;IAAqC,EACzD;EAAA,EACP;AAEX,CAAC;AAED,IAAMR,MAAM,GAAGU,UAAU,CAACC,MAAM,CAAC;EAC/BV,YAAY,EAAE;IACZW,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAE,CAAC;EACd,CAAC;EACDX,SAAS,EAAE;IACTY,MAAM,EAAE,EAAE;IACVC,eAAe,EAAE,OAAO;IACxBC,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE,EAAE;IACXL,UAAU,EAAE,QAAQ;IACpBM,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE;MACZC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE;IACV,CAAC;IACDC,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE;EACb,CAAC;EACDpB,MAAM,EAAE;IACNY,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE,EAAE;IACXO,SAAS,EAAE;EACb,CAAC;EACDjB,UAAU,EAAE;IACVQ,eAAe,EAAE;EACnB,CAAC;EACDV,WAAW,EAAE;IACXU,eAAe,EAAE;EACnB,CAAC;EACDT,SAAS,EAAE;IACTmB,KAAK,EAAE,OAAO;IACdC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE;EACb,CAAC;EACDxB,SAAS,EAAE;IACTyB,YAAY,EAAE,EAAE;IAChBD,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAenC,WAAW"},"metadata":{},"sourceType":"module"}